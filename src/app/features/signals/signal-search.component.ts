// Importuje direktivu NgFor pro iteraci v ≈°ablonƒõ
import { NgFor } from '@angular/common';
// Importuje pot≈ôebn√© funkce a dekor√°tor z Angular core
import { Component, computed, effect, signal } from '@angular/core';


// Definice typu pro u≈æivatele
interface User {
  id: number;
  name: string;
}


// Dekor√°tor komponenty definuj√≠c√≠ metadata komponenty
@Component({
  // Selektor pro pou≈æit√≠ t√©to komponenty v HTML
  selector: 'app-signal-search',
  // Urƒçuje, ≈æe komponenta je samostatn√° (standalone) bez pot≈ôeby modulu
  standalone: true,
  // Importuje NgFor pro pou≈æit√≠ v ≈°ablonƒõ
  imports: [NgFor],
  // Odkazuje na extern√≠ HTML ≈°ablonu komponenty
  templateUrl: './signal-search.component.html',
  // Odkazuje na extern√≠ CSS soubor se styly komponenty
  styleUrls: ['./signal-search.component.css'] // Opraven√Ω n√°zev z "styleUrl" na "styleUrls"
})
// Definice t≈ô√≠dy komponenty
export class SignalSearchComponent {
  // Reaktivn√≠ signal pro hledan√Ω ≈ôetƒõzec (≈ôetƒõzec)
  search = signal<string>('');

  // Reaktivn√≠ signal pro pole u≈æivatel≈Ø s typem User[]
  users = signal<User[]>([
    { id: 1, name: "Carl" },
    { id: 2, name: 'Peter' }
  ]);

  // Vypoƒç√≠tan√° hodnota typu User[] ‚Äì filtrovan√Ω seznam podle hled√°n√≠
  filteredUsers = computed<User[]>(() =>
    this.users().filter((u) =>
      u.name.toLowerCase().startsWith(this.search()))
  );

  // Metoda nastav√≠ hledan√Ω text podle input ud√°losti
  setSearchString(e: Event): void {
    this.search.set((e.target as HTMLInputElement).value.toLowerCase());
  }

  // Metoda p≈ôid√° nov√©ho u≈æivatele do seznamu
  addUser(): void {
    this.users.update((users) => [...users, { id: 3, name: "John" }]);

    // destroy
    // this.logger.destroy()
  }

  // ‚ö° Reaktivn√≠ efekt ‚Äì sleduje zmƒõny v `search`
  // a ukl√°d√° hodnotu do localStorage poka≈æd√©, kdy≈æ se `search` zmƒõn√≠
  logger = effect(() => {
    localStorage.setItem('searchString', this.search());
  });

  // üßπ ≈Ωivotn√≠ cyklus komponenty ‚Äì metoda, kter√° se zavol√° p≈ôi zniƒçen√≠ komponenty
  // Zde se efekt `logger` explicitnƒõ zru≈°√≠, aby se zabr√°nilo √∫nik≈Øm pamƒõti (memory leaks)
  ngOnDestroy() {
    this.logger.destroy();
  }
}
